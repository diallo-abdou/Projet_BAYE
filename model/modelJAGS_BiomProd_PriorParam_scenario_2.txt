# ---------------------------------------------------------------
# JAGS code for Dynamic Biomass Production Model
# State-space model

# Prior for parameters only

# E. Rivot
# November 2023

# ---------------------------------------------------------------

model_JAGS <- "


# Data block
# ---------------------------------------------------------------

# No data transformation in this example
# data{}

# Model 
# ---------------------------------------------------------------

model
{

# Prior 
# ---------------------------------------------------------------
# ---------------------------------------------------------------

# r ~ dunif(0.01,3)
# r_p ~ dunif(0.01,3)

# K ~ dunif(100,15000) 
# K_p ~ dunif(100,15000) 

# Gamma Informative priors on (r,K)

Er <- 0.45 ; CVr <- 0.3
ar <- 1/(CVr*CVr) ; br <- (1/(CVr*CVr))*(1/Er)
r ~ dgamma(ar,br) 
r_p ~ dgamma(ar,br) 

EK <- 5000 ; CVK <- 0.6
aK <- 1/(CVK*CVK) ; bK <- (1/(CVK*CVK))*(1/EK)
K ~ dgamma(aK,bK) 
K_p ~ dgamma(aK,bK) 

#-----------------------------------------------------------------

sigma_p ~ dunif(0, 10)

tau_p <- 1/(sigma_p*sigma_p)


# Taux d'exploitation

for (t in 1:(n_obs-1)){
h[t] ~ dbeta(1,1)
C[t] <- h[t]*B[t]
}


for (t in n_obs:(n_obs+n_proj-1)){
h[t] <- 0.3874379
}

# ici, l apport d un processus rajoute une variabilite dans la couche des latente
# le modele ne peut repartir de lui meme la variablite de processus et la variabilite d observation
# il est necessire de faire intervenir de l expertise pour le variance de Cobs


# on peut fixer Vobs ?? et deter V processus via en posant prior

# Dynamique de la biomasse

alpha <- 1

Bm[1] <- alpha*K
B[1] ~ dlnorm(log(Bm[1]), tau_p)

for (t in 1:(n_obs-1+n_proj)){
Bm[t+1] <- max(B[t] + r*B[t]*(1-B[t]/K) - h[t]*B[t], 0.0001*K)
B[t+1] ~ dlnorm(log(Bm[t+1]),tau_p)  
}


CV_o <- 0.2

sigma2_o <- log(CV_o * CV_o + 1 )

tau_o <- 1/(sigma2_o)

# Equation d observation

for (t in 1:(n_obs-1)){

C_obs[t] ~ dlnorm(log(C[t]), tau_o)

}


q ~ dunif(0, 1)

for (t in 1:(n_obs)){  # Ici 1:n_obs car pas de relation avec l'observation précédente
I[t] <- q * B[t]
I_obs[t] ~ dlnorm(log(I[t]), tau_o)  # On va considérer que l'incertitude d'observation est similaire (d'après les travaux sur ce jeux de données).
}







# ----------------------------------------------------------------

# Maximum surplus production

# Schaefer
C_MSY <-  r*K/4
C_MSY_p <-   r_p*K_p/4
# Fox
# C_MSY <-  r*K/(exp(1)*log(K))
# C_MSY_p <-   r_p*K_p/(exp(1)*log(K_p))

# Biomass at maximum surplus production

# Schaefer
B_MSY <- K/2
B_MSY_p <- K_p/2
# Fox
# B_MSY <- K / exp(1)
# B_MSY_p <- K_p / exp(1)

# Fishing mortality at MSY
# Schaefer : F_MSY = r/2
# Fox : F_MSY <- r/log(K)
h_MSY <- C_MSY / B_MSY
h_MSY_p <- C_MSY_p / B_MSY_p

# Depletion
# for (t in 1:(n_obs-1)){  D[t] <- B[t]/B[1]  } 

# Risk
# Measured as the probability that the biomass level (last year)
# is under a threshold defined a priori
# threshold <- B_MSY
# for (t in 1:(n_obs+n_proj)) {  risk[t] <- step(threshold-B[t])  }

# Equilibrium curve
# Depends on the parmaeters only 

for (e in 1:n_equi)
{
# Schaefer
C_e[e] <- r*B_e[e]*(1-B_e[e]/K)
# Fox model
# C_e[e] <- r*B_e[e]*(1-log(B_e[e])/log(K))
}

# end model
}"