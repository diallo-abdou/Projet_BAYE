dlnorm(log(MATm[1]), tau_p)
dlnorm(log(MATm[1]), tau_p)
dlnorm(log(MATm[1]), tau_p)
dlnorm(log(MATm[1]), tau_p)
dlnorm(log(MATm[1]), tau_p)
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = dlnorm(log(MATm[t+1]),tau_p)
}
MATm
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 1 # N0
MAT[1] = dlnorm(log(MATm[1]), tau_p)
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = dlnorm(log(MATm[t+1]),tau_p)
}
MATm
res
res = tibble(log_N = MAT) %>%
mutate(N = exp(log_N))
sortie1  <- MAT[temps]
sorties[i,1] <- sortie1
res
MAT
MAT
MATm
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 1 # N0
MAT[1] = rlnorm(log(MATm[1]), tau_p)
log(MATm[1])
MATm[1] = 1
MATm
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
log(MATm[1])
tau_p
rlnorm(log(MATm[1]), tau_p)
rlnorm(1, log(MATm[1]), tau_p)
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
MAT[1] = rlnorm(1, log(MATm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = rlnorm(log(MATm[t+1]),tau_p)
}
# fin boucle temps
res = tibble(log_N = MAT) %>%
mutate(N = exp(log_N))
sortie1  <- MAT[temps]
sorties[i,1] <- sortie1
return(res)
}
# END
HH = modAppli(parametre = c(1.5, 100))
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
MAT[1] = rlnorm(1, log(MATm[1]), tau_p)
MATm
MAT
t
t =1
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MATm
MAT[t+1] = rlnorm(log(MATm[t+1]),tau_p)
MAT[t+1] = rlnorm(1, log(MATm[t+1]),tau_p)
MAT
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
MAT[1] = rlnorm(1, log(MATm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = rlnorm(1, log(MATm[t+1]),tau_p)
}
# fin boucle temps
res = tibble(log_N = MAT) %>%
mutate(N = exp(log_N))
sortie1  <- MAT[temps]
sorties[i,1] <- sortie1
return(res)
}
# END
HH = modAppli(parametre = c(1.5, 100))
plot(1:30, HH$N)
res
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
MAT[1] = rlnorm(1, log(MATm[1]), tau_p)
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = rlnorm(1, log(MATm[t+1]),tau_p)
}
# fin boucle temps
res = tibble(log_N = MAT) %>%
mutate(N = exp(log_N))
res
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
MAT <- array(0, dim=c(temps))
MATm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
MATm[1] = 10 # N0
MAT[1] = rlnorm(1, log(MATm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
MATm[t+1] = max(MAT[t] + r * MAT[t]*(1-MAT[t]/K) , 0.0001*K)
MAT[t+1] = rlnorm(1, log(MATm[t+1]),tau_p)
}
# fin boucle temps
res = tibble(N = MAT)
sortie1  <- MAT[temps]
sorties[i,1] <- sortie1
return(res)
}
# END
HH = modAppli(parametre = c(1.5, 100))
plot(1:30, HH$N)
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
return(N)
}
# END
HH = modAppli(parametre = c(1.5, 100))
plot(1:30, HH)
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
return(N)
}
# END
HH = modAppli(parametre = c(1.5, 100))
plot(1:30, HH)
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
return(N)
}
# END
HH = modAppli(parametre = c(1.5, 100))
plot(1:30, HH)
# Paramètres du modèle
population <- 1000  # Taille de la population totale
infectes_initiaux <- 1  # Nombre initial d'infectés
taux_transmission <- 0.3  # Taux de transmission
taux_recuperation <- 0.1  # Taux de récupération
duree_simulation <- 200  # Durée de la simulation en jours
# Initialisation des compartiments S, I et R
S <- population - infectes_initiaux
I <- infectes_initiaux
R <- 0
# Vecteurs pour stocker les résultats au fil du temps
temps <- c(0)
susceptibles <- c(S)
infectes <- c(I)
recuperes <- c(R)
# Boucle de simulation avec l'algorithme de Gillespie
while (temps[length(temps)] < duree_simulation) {
# Calcul des taux d'événements
taux_infection <- taux_transmission * S * I / population
taux_guerison <- taux_recuperation * I
# Calcul du taux total d'événements
taux_total <- taux_infection + taux_guerison
# Génération d'un temps d'événement exponentiel
temps_evenement <- rexp(1, rate = taux_total)
# Mise à jour du temps de simulation
temps <- c(temps, temps[length(temps)] + temps_evenement)
# Choix de l'événement (infection ou guérison) en fonction des probabilités
prob_infection <- taux_infection / taux_total
if (runif(1) < prob_infection) {
S <- S - 1
I <- I + 1
} else {
I <- I - 1
R <- R + 1
}
# Stockage des résultats
susceptibles <- c(susceptibles, S)
infectes <- c(infectes, I)
recuperes <- c(recuperes, R)
}
library(deSolve)
library(ggplot2)
library(tidyverse)
# Define the SIR model as a system of ODEs
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <- beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
# Parameters with uncertainty (mean and standard deviation)
N <- 1000  # Total population
beta_mean <- 0.3
beta_stddev <- 0.05
gamma_mean <- 0.05
gamma_stddev <- 0.02
# Number of repetitions
num_repetitions <- 100
results <- list()
# Time settings
t <- seq(0, 200, by = 0.1)  # Time grid
# Simulate multiple repetitions with different parameter values
for (i in 1:num_repetitions) {
# Sample parameter values from normal distributions
beta <- rnorm(mean = beta_mean, sd = beta_stddev, n = num_repetitions)
gamma <- rnorm(mean = gamma_mean, sd = gamma_stddev, n = num_repetitions)
# Initial conditions for each repetition (can be different)
initial_conditions <- c(S = N - 1, I = 1, R = 0)
# Set up parameters
parameters <- tibble(beta = beta, gamma = gamma)
# Solve the ODEs for this repetition
solution <- ode(func = sir_model, y = initial_conditions, parms = parameters[i,], times = t)
# Store the results
results[[i]] <- as.data.frame(solution)
}
# Plot the results for each repetition
p = ggplot()
for (j in 1:length(results)){
p = p +
geom_line(data = results[[j]], aes(x = time, y = I, color = "I"), linewidth = 1)+
geom_line(data = results[[j]], aes(x = time, y = R, color = "R"), linewidth = 1)
}
print(p)
ggplot() +
geom_line(data = results, aes(x = time, y = I, color = "I"), linewidth = 1)+
geom_line(data = results, aes(x = time, y = R, color = "R"), linewidth = 1)+
ggtitle("A")
time = 1:30
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
res = tibble(N = N,
time = 1:temps)
return(res)
}
modAppli(parametre = c(1.5, 100)
# END
time = 1:30
modAppli(parametre = c(1.5, 100)
# END
modAppli(parametre = c(1.5, 100))
library(tidyverse)
modAppli <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
res = tibble(N = N,
time = 1:temps)
return(res)
}
modAppli(parametre = c(1.5, 100))
plot = ggplot()
for (j in 1:length(results)){
data_pop = modAppli(parametre = c(1.5, 100))
plot = plot +
geom_line(data = data_pop, aes(x = time, y = N), linewidth = 1)
}
print(plot)
results
plot = ggplot()
for (j in 1:10){
data_pop = modAppli(parametre = c(1.5, 100))
plot = plot +
geom_line(data = data_pop, aes(x = time, y = N), linewidth = 1)
}
print(plot)
plot = ggplot()
for (j in 1:5){
data_pop = modAppli(parametre = c(1.4, 100))
plot = plot +
geom_line(data = data_pop, aes(x = time, y = N), linewidth = 0.5)
}
print(plot)
plot = ggplot()
for (j in 1:5){
data_pop = modAppli(parametre = c(1.2, 100))
plot = plot +
geom_line(data = data_pop, aes(x = time, y = N), linewidth = 0.5)
}
print(plot)
library(tidyverse)
simulation <- function(parametre){
# CONDITIONS DE SIMULATION
temps = 30 # nb de pas de temps (en années)
# initialisation pour la sauvegarde de 4 sorties ponctuelles pour chaque jeu de param?tres
sorties <- matrix(0, nrow=length(parametre), ncol=1)
# boucle des sc?narios de l'?chantillonnage de l'AS
for (i in 1:length(parametre)) {
# STRUCTURE & PARAMETRES DU MODELE
#
r = parametre[1]
K = parametre[2]
tau_p = 0.1
}
# INITIALISATION
N <- array(0, dim=c(temps))
Nm <- array(0, dim=c(temps))
# conditions initiales (la population est ? sa structure d'?quilibre, calcul?e par ailleurs)
Nm[1] = 10 # N0
N[1] = rlnorm(1, log(Nm[1]), tau_p)
# SIMULATIONS
# boucle du temps
for (t in 1:(temps-1)) {
Nm[t+1] = max(N[t] + r * N[t]*(1-N[t]/K) , 0.0001*K)
N[t+1] = rlnorm(1, log(Nm[t+1]),tau_p)
}
# fin boucle temps
sortie1  <- N[temps]
sorties[i,1] <- sortie1
res = tibble(N = N,
time = 1:temps)
return(res)
}
plot = ggplot()
for (j in 1:5){
data_pop = simulation(parametre = c(1.2, 100))
plot = plot +
geom_line(data = data_pop, aes(x = time, y = N), linewidth = 0.5)
}
print(plot)
